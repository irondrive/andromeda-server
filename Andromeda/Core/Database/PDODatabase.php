<?php declare(strict_types=1); namespace Andromeda\Core\Database; if (!defined('Andromeda')) die();

if (!class_exists('PDO')) 
    die("PHP PDO Extension Required".PHP_EOL); 

if (!function_exists('mb_internal_encoding'))
    die("PHP mbstring Extension Required".PHP_EOL);

mb_internal_encoding("UTF-8");

use \PDO; use \PDOStatement; use \PDOException;

use Andromeda\Core\Utilities;
use Andromeda\Core\IOFormat\SafeParams;

/**
 * This class implements the PDO database abstraction.
 * 
 * Manages connecting to the database, installing config, abstracting some driver 
 * differences, and logging queries and performance statistics.  Queries are always
 * made as part of a transaction, and always used as prepared statements. Performance 
 * statistics and queries are tracked as a stack, but transactions cannot be nested.
 * Queries made must always be compatible with all supported drivers.
 */
class PDODatabase
{
    /** the PDO database connection */
    private PDO $connection; 
    
    /** a unique instance ID */
    private string $instanceId;
    
    /** 
     * $config associative array of config for connecting PDO 
     * @var array<string, mixed>
     */
    private array $config;
    
    /** The enum value of the driver being used */
    private int $driver;
    
    /** if true, don't allow writes */
    private bool $read_only = false;
    
    /** 
     * the stack of DB statistics contexts, for nested API->Run() calls 
     * @var array<DBStats>
     */
    private array $stats_stack = array();
    
    /** 
     * global history of SQL queries sent to the DB (not a stack), possibly with errors 
     * @var array<mixed>
     */
    private array $queries = array();
    
    /** the default path for storing the config file */
    private const CONFIG_PATHS = array(
        ROOT."/DBConfig.php",
        null, // ~/.config/andromeda/DBConfig.php
        '/usr/local/etc/andromeda/DBConfig.php',
        '/etc/andromeda/DBConfig.php'
    );    
    
    public const DRIVER_MYSQL = 1; 
    public const DRIVER_SQLITE = 2; 
    public const DRIVER_POSTGRESQL = 3;
    
    private const DRIVERS = array(
        'mysql'=>self::DRIVER_MYSQL,
        'sqlite'=>self::DRIVER_SQLITE,
        'pgsql'=>self::DRIVER_POSTGRESQL);
    
    /**
     * Loads a config file path into an array of config generated by Install()
     * @param ?string $path the path to the config file to use, null for defaults
     * @throws Exceptions\DatabaseMissingException if the given path does not exist
     * @throws Exceptions\DatabaseConfigException if the given file does not return an array
     * @return array<mixed>
     */
    public static function LoadConfig(?string $path = null) : array
    {
        $paths = defined('DBCONF') ? array(DBCONF) : self::CONFIG_PATHS;
        
        if ($path !== null)
        {
            if (!is_file($path))
                throw new Exceptions\DatabaseMissingException();
        }
        else foreach ($paths as $ipath)
        {
            if ($ipath === null)
            {
                $home = $_ENV["HOME"] ?? $_ENV["HOMEPATH"] ?? null;
                if ($home) $ipath = "$home/andromeda/DBConfig.php";
            }
            
            if ($ipath && is_file($ipath)) {
                $path = $ipath; break; }
        }
        
        if ($path !== null)
        {
            $retval = require($path);
            if (is_array($retval)) return $retval;
            else throw new Exceptions\DatabaseConfigException('not array'); 
        }
        else throw new Exceptions\DatabaseMissingException();
    }

    /** Returns a string with the primary CLI usage for Install() */
    public static function GetInstallUsage() : string { return "--driver mysql|pgsql|sqlite [--outfile [fspath]]"; }
    
    /** 
     * Returns the CLI usages specific to each driver 
     * @return array<string>
     */
    public static function GetInstallUsages() : array
    {
        return array(
            "--driver mysql --dbname alphanum (--unix_socket fspath | (--host hostname [--port uint16])) [--dbuser name] [--dbpass raw] [--persistent bool]",
            "--driver pgsql --dbname alphanum --host hostname [--port ?uint16] [--dbuser ?name] [--dbpass ?raw] [--persistent ?bool]",
            "--driver sqlite --dbpath fspath"
        );
    }
    
    /**
     * Creates and tests a new database config from the given user input
     * @param SafeParams $params input parameters
     * @see self::GetInstallUsage()
     * @throws Exceptions\DatabaseInstallException if the database config is not valid and PDO fails
     * @return ?string the database config file contents if no outfile
     */
    public static function Install(SafeParams $params) : ?string
    {
        $driver = $params->GetParam('driver')->FromWhitelist(array_keys(self::DRIVERS));
        
        $config = array('DRIVER'=>$driver);
        
        if ($driver === 'mysql' || $driver === 'pgsql')
        {
            $connect = "dbname=".$params->GetParam('dbname')->GetAlphanum();
            
            if ($driver === 'mysql' && $params->HasParam('unix_socket'))
            {
                $connect .= ";unix_socket=".$params->GetParam('unix_socket')->GetFSPath();
            }
            else 
            {
                $connect .= ";host=".$params->GetParam('host')->GetHostname();
                
                if (($port = $params->GetOptParam('port',null)->GetNullUint16()) !== null)
                {
                    $connect .= ";port=$port";
                }
            }
            
            if ($driver === 'mysql') $connect .= ";charset=utf8mb4";
            
            $config['CONNECT'] = $connect;
            
            $config['PERSISTENT'] = $params->GetOptParam('persistent',null)->GetNullBool();
            
            $config['USERNAME'] = $params->GetOptParam('dbuser',null)->GetNullName();
            $config['PASSWORD'] = $params->GetOptParam('dbpass',null,SafeParams::PARAMLOG_NEVER)->GetNullRawString();
        }
        else if ($driver === 'sqlite')
        {
            $config['CONNECT'] = $params->GetParam('dbpath')->GetFSPath();    
        }
        
        $config = var_export($config,true);
        
        $output = "<?php if (!defined('Andromeda')) die(); return $config;";
        
        if ($params->HasParam('outfile')) // store it
        {
            $outnam = $params->GetParam('outfile')->GetNullFSPath() ?? self::CONFIG_PATHS[0];

            $tmpnam = "$outnam.tmp.php";
            file_put_contents($tmpnam, $output);
            
            try { new self(self::LoadConfig($tmpnam), true); }
            catch (Exceptions\PDODatabaseConnectException $e) 
            {
                unlink($tmpnam); 
                throw new Exceptions\DatabaseInstallException($e); 
            }
            
            rename($tmpnam, $outnam); return null;
        }
        else return $output;
    }
    
    /**
     * Constructs the database and initializes the PDO connection, and adds a stats context
     * @param array<mixed> $config the associative array of config generated by Install()
     * @param bool $verbose if true, show the PDO error if the connection fails
     * @param ?DBStats $init_stats optional stats tracking for init
     * @throws Exceptions\DatabaseConfigException if the driver in the config is invalid
     * @throws Exceptions\PDODatabaseConnectException if the connection fails
     */
    public function __construct(array $config, bool $verbose = false, ?DBStats $init_stats = null)
    {
        if ($init_stats !== null)
            $this->stats_stack[] = $init_stats;
        
        $this->config = $config;
        
        if (!array_key_exists('DRIVER',$config))
            throw new Exceptions\DatabaseConfigException('missing DRIVER');
        if (!array_key_exists('CONNECT',$config))
            throw new Exceptions\DatabaseConfigException('missing CONNECT');
        
        $driver = $config['DRIVER'];
        if (!array_key_exists($driver, self::DRIVERS))
            throw new Exceptions\DatabaseConfigException("driver $driver");
        
        $this->driver = self::DRIVERS[$driver];
        $connect = $driver.':'.$config['CONNECT'];
        
        try
        {
            $options = array(
                PDO::ATTR_PERSISTENT => $config['PERSISTENT'] ?? false,
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_EMULATE_PREPARES => false,
                PDO::ATTR_STRINGIFY_FETCHES => false
            );
            
            // match rowCount behavior of postgres and sqlite
            if ($this->driver === self::DRIVER_MYSQL)
                $options[PDO::MYSQL_ATTR_FOUND_ROWS] = true;
                
            $username = $config['USERNAME'] ?? null;
            $password = $config['PASSWORD'] ?? null;
            
            $this->connection = new PDO($connect, $username, $password, $options);
        }
        catch (PDOException $e){ throw new Exceptions\PDODatabaseConnectException($verbose ? $e : null); }
        
        if ($this->connection->inTransaction())
            $this->connection->rollback();
            
        if ($this->driver === self::DRIVER_SQLITE)
            $this->connection->query("PRAGMA foreign_keys = ON");
        
        $this->instanceId = "Database_".Utilities::Random(4);
    }
    
    /** @see self::$driver */
    public function getDriver() : int { return $this->driver; }
    
    /** Returns the DB's unique instance ID */
    public function getInstanceID() : string { return $this->instanceId; }
    
    /** 
     * returns the array of config that was loaded from the config file 
     * @return array<string, mixed> `{driver:string, connect:string, ?username:string, ?password:true, ?persistent:bool}`
     */
    public function GetConfig() : array
    {
        $config = $this->config;
        
        if ($config['PASSWORD'] ?? null) 
            $config['PASSWORD'] = true;
        
        return $config;
    }
    
    /**
     * returns an array with some PDO attributes for debugging 
     * @return array<mixed> `{driver:string, cversion:string, sversion:string, ?info:string}`
     */
    public function getInfo() : array
    {
        $retval = array(
            'driver' => $this->connection->getAttribute(PDO::ATTR_DRIVER_NAME),
            'cversion' => $this->connection->getAttribute(PDO::ATTR_CLIENT_VERSION),
            'sversion' => $this->connection->getAttribute(PDO::ATTR_SERVER_VERSION)
        );
        
        if ($this->getDriver() !== self::DRIVER_SQLITE)
            $retval['info'] = $this->connection->getAttribute(PDO::ATTR_SERVER_INFO);
        
        return $retval;
    }
    
    /**
     * Sets the database as writeable or readonly
     * @param bool $ro if true, set as readonly
     * @return $this
     */
    public function SetReadOnly(bool $ro = true) : self { $this->read_only = $ro; return $this; }
    
    /** Returns true if the database is read-only */
    public function isReadOnly() : bool { return $this->read_only; }
    
    /**
     * Imports the appropriate SQL template file for an app
     * @param string $path the base path containing the templates
     */
    public function importTemplate(string $path) : self { return $this->importFile($path."/andromeda.".$this->config['DRIVER'].".sql"); }
    
    /**
     * Parses and imports an SQL file into the database
     * @param string $path the path of the SQL file
     * @throws Exceptions\ImportFileMissingException if path does not exist
     */
    public function importFile(string $path) : self
    {
        if (($data = file($path)) === false) 
            throw new Exceptions\ImportFileMissingException($path);
        
        // get rid of comment lines
        $lines = array_filter($data,function(string $line){ 
            return mb_substr($line,0,2) != "--"; });
        
        // separate queries by ; (end of query)
        $queries = explode(";", implode($lines));
        
        // trim queries and empty lines
        $queries = array_filter(array_map(function(string $query){ 
            return trim($query); }, $queries));
        
        foreach ($queries as $query) $this->query($query); return $this;
    }
    
    /** Whether or not the DB supports the RETURNING keyword */
    public function SupportsRETURNING() : bool { return $this->getDriver() !== self::DRIVER_SQLITE; }
    
    /** Whether or not the DB aborts transactions after an error and requires use of SAVEPOINTs */
    private function RequiresSAVEPOINT() : bool { return $this->getDriver() === self::DRIVER_POSTGRESQL; }
    
    /** Whether or not the DB fetches binary/blob fields as streams rather than scalars */
    private function BinaryAsStreams() : bool   { return $this->getDriver() === self::DRIVER_POSTGRESQL; }
    
    /** Whether or not the DB requires binary input to be escaped */
    private function BinaryEscapeInput() : bool { return $this->getDriver() === self::DRIVER_POSTGRESQL; }
    
    /** Whether or not the DB expects using public. as a prefix for table names */
    public function UsePublicSchema() : bool   { return $this->getDriver() === self::DRIVER_POSTGRESQL; }
    
    /** Whether or not the returned data rows are always string values (false if the are proper types) */
    public function DataAlwaysStrings() : bool { return $this->getDriver() !== self::DRIVER_MYSQL; }
    
    /** Returns the given arguments concatenated in SQL */
    public function SQLConcat(string ...$args) : string
    {
        if ($this->getDriver() === self::DRIVER_MYSQL)
        {
            return "CONCAT(".implode(',',$args).")";
        }
        else return implode(' || ',$args);
    }

    /** Returns true if the DB is currently in a transaction */
    public function inTransaction() : bool { return $this->connection->inTransaction(); }

    /**
     * Sends an SQL read query down to the database
     * @param string $sql the SQL query string, with placeholder data values
     * @param ?array<string, scalar> $data associative array of data replacements for the prepared statement
     * @return array<array<string, ?scalar>> an associative array of the query results - results MAY be all strings!
     * @throws Exceptions\DatabaseFetchException if the row fetch fails
     * @see self::query()
     */
    public function read(string $sql, ?array $data = null) : array
    {
        $this->startTimingQuery();
        
        $query = $this->query($sql, $data);

        $result = $query->fetchAll(PDO::FETCH_ASSOC);
        
        if ($result === false) throw new Exceptions\DatabaseFetchException();

        if ($this->BinaryAsStreams()) $this->fetchStreams($result);
        
        $this->stopTimingQuery($sql, DBStats::QUERY_READ);
        
        return $result;
    }
    
    /**
     * Sends an SQL write query down to the database
     * @param string $sql the SQL query string, with placeholder data values
     * @param ?array<string, scalar> $data associative array of data replacements for the prepared statement
     * @return int count of matched objects (not count of modified!)
     * @throws Exceptions\DatabaseReadOnlyException if the DB is read-only
     * @see self::query()
     */
    public function write(string $sql, ?array $data = null) : int
    {        
        if ($this->read_only) throw new Exceptions\DatabaseReadOnlyException();
        
        $this->startTimingQuery();
        
        $query = $this->query($sql, $data);
        
        $result = $query->rowCount();
        
        $this->stopTimingQuery($sql, DBStats::QUERY_WRITE);
        
        return $result;
    }
    
    /**
     * Sends an SQL read+write query down to the database
     * @param string $sql the SQL query string, with placeholder data values
     * @param ?array<string, scalar> $data associative array of data replacements for the prepared statement
     * @return array<array<string, ?scalar>> an associative array of the query results - results MAY be all strings!
     * @throws Exceptions\DatabaseReadOnlyException if the DB is read-only
     * @throws Exceptions\DatabaseFetchException if the row fetch fails
     * @see self::query()
     */
    public function readwrite(string $sql, ?array $data = null) : array
    {
        if ($this->read_only) throw new Exceptions\DatabaseReadOnlyException();
        
        $this->startTimingQuery();
        
        $query = $this->query($sql, $data);
        
        $result = $query->fetchAll(PDO::FETCH_ASSOC);
        
        if ($result === false) throw new Exceptions\DatabaseFetchException();
        
        if ($this->BinaryAsStreams()) $this->fetchStreams($result);
        
        $this->stopTimingQuery($sql, DBStats::QUERY_READ | DBStats::QUERY_WRITE);
        
        return $result;
    }

    /**
     * Sends an SQL query down to the database, possibly beginning a transaction
     * @param string $sql the SQL query string, with placeholder data values
     * @param ?array<string, scalar> $data associative array of data replacements for the prepared statement
     * @throws Exceptions\DatabaseQueryException if the database query throws a PDOException
     * @return PDOStatement the finished PDO statement object
     */
    protected function query(string $sql, ?array $data = null) : PDOStatement
    {
        if (!$this->connection->inTransaction())
            $this->beginTransaction();
            
        $this->logQuery($sql, $data);
        
        $doSavepoint = $this->RequiresSAVEPOINT();

        if ($this->BinaryEscapeInput() && $data !== null)
        {
            foreach ($data as &$value)
            {
                if (is_string($value) && !Utilities::isUTF8($value))
                    $value = pg_escape_bytea($value);
            }
        }
        
        try
        {
            if ($doSavepoint)
                $this->connection->query("SAVEPOINT a2save");
            
            $query = $this->connection->prepare($sql);
            $query->execute($data ?? array());

            if ($doSavepoint)
                $this->connection->query("RELEASE SAVEPOINT a2save");
            
            return $query;
        }
        catch (PDOException $e)
        {
            if ($doSavepoint)
                $this->connection->query("ROLLBACK TO SAVEPOINT a2save");
                
            $idx = count($this->queries)-1;
            $this->queries[$idx] = array($this->queries[$idx], $e->getMessage());

            $eclass = substr($e->getCode(),0,2);
            
            if ($eclass === '23') // SQL 23XXX
                throw new Exceptions\DatabaseIntegrityException($e);
            else throw new Exceptions\DatabaseQueryException($e); 
        }
    }
    
    private bool $logValues = false;

    /** Sets logValues - if true, log DB query input values (not just placeholders) */
    public function SetLogValues(bool $logValues) : self
    {
        $this->logValues = $logValues; return $this;
    }
    
    /** 
     * Logs a query to the internal query history, logging the actual data values if debug allows 
     * @param ?array<string, scalar> $data
     */
    private function logQuery(string $sql, ?array $data) : string
    {
        if ($data !== null && $this->logValues)
        {            
            foreach ($data as $key=>$val)
            {
                if (is_string($val))
                {
                    if (!Utilities::isUTF8($val))
                        $val = 'b64:('.base64_encode((string)$val).')';
                    $val = str_replace('\\','\\\\',"'$val'");
                }

                $sql = Utilities::replace_first(":$key", (string)$val, $sql);
            }
        }
        
        return $this->queries[] = $sql;
    }
    
    /**
     * Loops through an array of row results and replaces streams with their values
     * @param array<array<string, mixed>> $rows reference to an array of rows from the DB
     */
    private function fetchStreams(array &$rows) : void
    {
        foreach ($rows as &$row)
        {
            foreach ($row as &$value)
            {
                if (is_resource($value))
                    $value = stream_get_contents($value);
            }
        }
    }
    
    /** Begins a new database transaction */
    public function beginTransaction() : void
    {
        if (!$this->connection->inTransaction())
        {
            $sql = "PDO->beginTransaction()";
            $this->queries[] = $sql;
            $this->startTimingQuery();
            
            if ($this->driver === self::DRIVER_MYSQL)
                $this->configTransaction();

            $this->connection->beginTransaction();
            
            if ($this->driver === self::DRIVER_POSTGRESQL)
                $this->configTransaction();
                
            $this->stopTimingQuery($sql, DBStats::QUERY_READ, false);
        }
    }
    
    /** Sends a query to configure the isolation level and access mode */
    private function configTransaction() : void
    {
        $qstr = "SET TRANSACTION ISOLATION LEVEL READ COMMITTED";
        
        if ($this->read_only) $qstr .= " READ ONLY";
        
        $this->connection->query($qstr);
    }

    /** Rolls back the current database transaction */
    public function rollback() : void
    { 
        if ($this->connection->inTransaction())
        {
            $sql = "PDO->rollback()";
            $this->queries[] = $sql;
            $this->startTimingQuery();            
            $this->connection->rollback();
            $this->stopTimingQuery($sql, DBStats::QUERY_WRITE, false);
        }
    }
    
    /** Commits the current database transaction */
    public function commit() : void
    {
        if ($this->connection->inTransaction()) 
        {
            $sql = "PDO->commit()";
            $this->queries[] = $sql;
            $this->startTimingQuery();
            $this->connection->commit();             
            $this->stopTimingQuery($sql, DBStats::QUERY_WRITE, false);
        }
    }
    
    /** Begins timing a query (performance metrics) */
    private function startTimingQuery() : void
    {
        $s = Utilities::array_last($this->stats_stack);
        if ($s !== null) $s->startQuery();
    }
    
    /** Ends timing a query (performance metrics) */
    private function stopTimingQuery(string $sql, int $type, bool $count = true) : void
    {
        $s = Utilities::array_last($this->stats_stack);
        if ($s !== null) $s->endQuery($sql, $type, $count);
    }
    
    /** Add a new performance metrics context on to the stack and returns it */
    public function pushStatsContext() : DBStats
    {
        return $this->stats_stack[] = new DBStats();
    }

    /** Pop the current performance metrics context off of the stack */
    public function popStatsContext() : ?DBStats
    {
        $obj = array_pop($this->stats_stack);
        if ($obj !== null) $obj->stopTiming();
        return $obj;
    }
    
    /** 
     * Returns the array of query history 
     * @return array<mixed> string array
     */
    public function getAllQueries() : array
    {
        return $this->queries;
    }
}

